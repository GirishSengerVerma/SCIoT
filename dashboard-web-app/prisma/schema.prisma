// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Location {
  STUTTGART_VAIHINGEN_OFFICE
  STUTTGART_KILLESBERG_PARK
  STUTTGART_MAX_EYTH_SEE
  AUTHORITIES_HUB
}

model Sensor {
  id                  Int                   @id @default(autoincrement())
  instanceId          String                @unique
  createdAt           DateTime              @default(now())
  isPhysical          Boolean               @default(false)
  SensorMetaData      SensorMetaData[]
  SensorTelemetryData SensorTelemetryData[]
}

enum SensorMeasure {
  TEMPERATURE
  WIND_SPEED
  HUMIDITY
  PRESSURE
  VIBRATION
  CO
  CO2
  SOUND
  WATER_LEVEL
  RAIN
}

enum SensorSimulationMode {
  EXTREMELY_LOW
  LOW
  MEDIUM
  HIGH
  EXTREMELY_HIGH
}

enum SensorSimulationBehavior {
  NORMAL_DISTRIBUTED
  INCREASING
  DECREASING
}

model SensorMetaData {
  id                 Int                       @id @default(autoincrement())
  sensor             Sensor                    @relation(fields: [instanceId], references: [instanceId])
  instanceId         String
  timestamp          DateTime                  @default(now())
  name               String
  location           Location
  measure            SensorMeasure
  simulationMode     SensorSimulationMode?
  simulationBehavior SensorSimulationBehavior?
}

enum SensorUnit {
  DEGREES_CELSIUS
  KILOMETERS_PER_HOUR
  PERCENTAGE
  HPA
  RICHTER_MAGNITUDE
  PPM
  DB
  METERS
  BOOLEAN
}

model SensorTelemetryData {
  id         Int        @id @default(autoincrement())
  sensor     Sensor     @relation(fields: [instanceId], references: [instanceId])
  instanceId String
  timestamp  DateTime
  unit       SensorUnit
  value      Decimal
}

model Actuator {
  id                 Int                  @id @default(autoincrement())
  instanceId         String               @unique
  createdAt          DateTime             @default(now())
  isPhysical         Boolean              @default(false)
  ActuatorMetaData   ActuatorMetaData[]
  ActuatorStatusData ActuatorStatusData[]
}

enum ActuatorType {
  ALARM_LIGHT
  ALARM_SOUND
  WATER_PROTECTION_WALL
  LOCKDOWN
}

model ActuatorMetaData {
  id         Int          @id @default(autoincrement())
  actuator   Actuator     @relation(fields: [instanceId], references: [instanceId])
  instanceId String
  timestamp  DateTime     @default(now())
  name       String
  location   Location
  type       ActuatorType
}

model ActuatorStatusData {
  id                   Int                 @id @default(autoincrement())
  actuator             Actuator            @relation(fields: [instanceId], references: [instanceId])
  instanceId           String
  timestamp            DateTime
  enabled              Boolean
  lastChangedBy        WeatherEventAction? @relation(fields: [weatherEventActionId], references: [id])
  weatherEventActionId Int?
}

enum UnitType {
  AMBULANCE
  POLICE_CAR
  FIRE_TRUCK
}

model UnitStatus {
  id                   Int                 @id @default(autoincrement())
  unitType             UnitType
  location             Location
  amount               Int
  timestamp            DateTime            @default(now())
  changedBy            WeatherEventAction? @relation(fields: [weatherEventActionId], references: [id])
  weatherEventActionId Int?

  @@unique([unitType, location, timestamp])
}

enum WeatherEventType {
  STORM
  TORNADO
  HAIL_STORM
  THUNDER_STORM
  HURRICANE
  BLIZZARD
  FLOOD
  COLD
  HEAT
  WILD_FIRE
  EARTH_QUAKE
  BAD_AIR
}

enum WeatherEventRiskLevel {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

model WeatherEvent {
  id                 Int                  @id @default(autoincrement())
  location           Location
  type               WeatherEventType
  start              DateTime             @default(now())
  end                DateTime?
  WeatherEventRisk   WeatherEventRisk[]
  WeatherEventAction WeatherEventAction[]
}

model WeatherEventRisk {
  id             Int                   @id @default(autoincrement())
  weatherEvent   WeatherEvent          @relation(fields: [weatherEventId], references: [id])
  weatherEventId Int
  riskLevel      WeatherEventRiskLevel @default(LOW)
  start          DateTime              @default(now())
  end            DateTime?
}

enum WeatherEventActionType {
  PLANNING_INCREASE_RISK_LEVEL
  PLANNING_DECREASE_RISK_LEVEL
  ALERT_LOCALS_BY_LIGHT
  ALERT_LOCALS_BY_SOUND
  ALERT_LOCALS_BY_DEVICE_NOTIFICATION
  ALERT_AUTHORITIES_BY_DEVICE_NOTIFICATION
  COUNTER_MEASURE_DRIVE_UP_WATER_PROTECTION_WALL
  COUNTER_MEASURE_DRIVE_DOWN_WATER_PROTECTION_WALL
  COUNTER_MEASURE_LOCK_DOWN_LOCATION
  COUNTER_MEASURE_REOPEN_LOCATION
  COUNTER_MEASURE_MOVE_UNITS_REQUEST
  COUNTER_MEASURE_MOVE_UNITS_RESPONSE
}

model WeatherEventAction {
  id                    Int                    @id @default(autoincrement())
  weatherEvent          WeatherEvent?          @relation(fields: [weatherEventId], references: [id])
  weatherEventId        Int?
  timestamp             DateTime               @default(now())
  type                  WeatherEventActionType
  wasManuallyTaken      Boolean                @default(false)
  location              Location
  moveUnitsType         UnitType?
  moveUnitsFromLocation Location?
  moveUnitsToLocation   Location?
  moveUnitsAmount       Int?
  UnitStatus            UnitStatus[]
  ActuatorStatusData    ActuatorStatusData[]
}
